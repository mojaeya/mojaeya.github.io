I"BJ<blockquote>
  <p>Vue.js 3.x / Vue-CLI 5</p>
</blockquote>

<h4 id="vue의-가장-큰-장점-중-하나는-컴포넌트를-재활용하는-것이다-즉-다른-컴포넌트에-import해서-사용가능하다는-말이다"><strong><mark style="background-color: #dcffe4">Vue</mark></strong>의 가장 큰 장점 중 하나는 <code class="language-plaintext highlighter-rouge">컴포넌트를 재활용</code>하는 것이다. 즉, 다른 컴포넌트에 import해서 사용가능하다는 말이다.</h4>

<hr />

<h2 id="컴포넌트component">컴포넌트(Component)</h2>

<p><code class="language-plaintext highlighter-rouge">컴포넌트(Component)</code>는 조합하여 화면을 구성할 수 있는 블록을 의미한다. 쉽게 View, Data, Code의 세트라고 생각하면 된다. <code class="language-plaintext highlighter-rouge">컴포넌트</code>를 활용하면 화면을 빠르게 구조화하여 일괄적인 패턴으로 개발 할 수 있으며, 코드를 쉽게 이해하고 재사용할 수 있다.</p>

<p><strong><mark style="background-color: #dcffe4">Vue</mark></strong>에서 <code class="language-plaintext highlighter-rouge">컴포넌트</code>는 우리가 화면에서 보는 페이지 자체일 수도 있고, 페이지 내의 특정 기능 요소일 수도 있다.</p>

<p>그러므로 <strong><mark style="background-color: #dcffe4">Vue</mark></strong>로 개발을 할 때 <code class="language-plaintext highlighter-rouge">컴포넌트 설계</code>를 어떻게 하는지가 중요하다.<br />
(동일한 기능을 가진 컴포넌트를 하나 만들어 여러 페이지에서 사용)</p>

<p><strong><mark style="background-color: #dcffe4">Vue CLI</mark></strong>로 프로젝트를 생성하면 src 폴더 안에 <code class="language-plaintext highlighter-rouge">components</code>, <code class="language-plaintext highlighter-rouge">views</code> 폴더가 있는데<br />
<code class="language-plaintext highlighter-rouge">views</code> 폴더에 우리가 페이지라고 부르는 화면 하나 하나에 해당하는 <strong><mark style="background-color: #dcffe4">Vue 컴포넌트</mark></strong> 파일을 생성하는거고,<br />
<code class="language-plaintext highlighter-rouge">components</code> 폴더에는 <strong><mark style="background-color: #dcffe4">다른 Vue 폴더</mark></strong> 에서 호출해서 공통으로 사용할 수 있는 <strong><mark style="background-color: #dcffe4">Vue 컴포넌트</mark></strong>을 생성하고 관리하게 되는 것이다.</p>

<p>결국 사실 <strong><mark style="background-color: #dcffe4">Vue 입장</mark></strong>에서는 모든 vue 파일이 내부적으로는 모두 동일한 구조를 가진 컴포넌트이지만, 개발자가 물리적으로 이렇게 폴더를 구분해서 효율적으로 관리한다고 보면 된다.</p>

<hr />

<h2 id="컴포넌트-안에-다른-컴포넌트-사용하기">컴포넌트 안에 다른 컴포넌트 사용하기</h2>

<blockquote>
  <p>Vue 네이밍 룰</p>

  <ul>
    <li>파일명은 두단어 이상 합성어로 작성하기!</li>
    <li>그리고 views 폴더는 xxxView.vue 로 작성하기!</li>
  </ul>
</blockquote>

<h4 id="-src--components--pagetitlevue">&gt; src / components / PageTitle.vue</h4>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template&gt;</span>
  <span class="nt">&lt;h2&gt;</span>사라진 기억들에게<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;/template&gt;</span>
</code></pre></div></div>

<h4 id="-src--views--pageviewvue">&gt; src / views / PageView.vue</h4>

<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div&gt;</span>
        <span class="nt">&lt;PageTitle</span> <span class="nt">/&gt;</span> // 3.html에서는 import한 컴포넌트 이름을 이용해서 태그를 만들면 끝!
        // <span class="nt">&lt;page-title</span> <span class="nt">/&gt;</span> : 이렇게 쓸 수도 있음
        // <span class="nt">&lt;p-t</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="k">import</span> <span class="nx">PageTitle</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/components/PageTitle.vue</span><span class="dl">'</span> <span class="c1">// 1. PageTitle 컴포넌트를 import</span>
<span class="c1">// import PageTitle from '../components/PageTitle.vue'</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">components</span><span class="p">:</span> <span class="p">{</span> <span class="nx">PageTitle</span> <span class="p">},</span> <span class="c1">// 2. 현재 컴포넌트 템플릿에서 사용할 컴포넌트를 등록</span>
  <span class="c1">// 컴포넌트 이름을 다르게 쓰고 싶으면 components: { 'p-t': PageTitle }</span>
</code></pre></div></div>

<p>이렇게 하면 <code class="language-plaintext highlighter-rouge">components / PageTitle.vue</code> 파일에 작성한 <mark style="background-color: #dcffe4">&lt;h2&gt;사라진 기억들에게&lt;/h2&gt;</mark>가<br />
<code class="language-plaintext highlighter-rouge">views / PageView.vue</code> 파일에 사용되어 페이지 화면에 렌더링 된다.</p>

<p>✔️ 만약 공동으로 개발을 할 때 이렇게 페이지마다 각 타이틀에 대한 컴포넌트를 만들어 제공해서 사용한다면, 모든 화면에 대한 통일성을 가져갈 뿐 만 아니라 수정도 한번에 가능하기 때문에 효율적이다.</p>

<hr />

<h2 id="props--부모-컴포넌트에서-자식-컴포넌트로-데이터-전달"><code class="language-plaintext highlighter-rouge">props</code> : 부모 컴포넌트에서 자식 컴포넌트로 데이터 전달</h2>

<p>🔗 위에서 봤던 PageTitle.vue 파일을 아래와 같이 수정</p>

<h4 id="-src--components--pagetitlevue-자식-컴포넌트">&gt; src / components / PageTitle.vue (자식 컴포넌트)</h4>

<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h3&gt;</span><span class="si">{{</span> <span class="nx">title</span> <span class="si">}}</span><span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="c1">// props에 title이라는 키를 갖는 객체를 추가</span>
  <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="c1">// 저장될 데이터의 타입</span>
      <span class="na">default</span><span class="p">:</span> <span class="dl">'</span><span class="s1">페이지 제목</span><span class="dl">'</span> <span class="c1">// 부모 컴포넌트로부터 데이터가 전달되지 않았을 때</span>
    <span class="p">}</span>
  <span class="p">},</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">props</code>에는 <code class="language-plaintext highlighter-rouge">부모 컴포넌트</code>로 전달받은 데이터가 저장된다.<br />
<code class="language-plaintext highlighter-rouge">props</code>에 정의된 <code class="language-plaintext highlighter-rouge">Key</code>에는 저장될 데이터의 <code class="language-plaintext highlighter-rouge">type</code>과 <code class="language-plaintext highlighter-rouge">부모 컴포넌트</code>로부터 데이터가 전달되지 않았을 때의 <code class="language-plaintext highlighter-rouge">default</code> 값을 정의한다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h3&gt;</span>{{ title }}<span class="nt">&lt;/h3&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">props</code>에 정의된 <code class="language-plaintext highlighter-rouge">Key</code>는 <strong><mark style="background-color: #dcffe4">Vue 인스턴스의 데이터 값</mark></strong>으로 사용되기 때문에 <code class="language-plaintext highlighter-rouge">{{ }}</code> 콧수염 괄호(Mustache Tag)로 문자열에 대한 데이터 바인딩 처리가 가능하다.</p>

<hr />

<p>🔗 PageView.vue 파일에서 사용하고 있는 PageTitle 컴포넌트에 title이라는 속성 추가</p>

<h4 id="-src--views--pageviewvue-부모-컴포넌트">&gt; src / views / PageView.vue (부모 컴포넌트)</h4>

<p>✓ 여기서 설정한 title 값이, <code class="language-plaintext highlighter-rouge">자식 컴포넌트인</code> PageTitle.vue에 정의된 props의 title에 전달되는 것이다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;PageTitle</span> <span class="na">title=</span><span class="s">"사라진 기억들에게"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<hr />

<h2 id="v-bind로-자식-컴포넌트-prop에-값-전달">v-bind로 자식 컴포넌트 prop에 값 전달</h2>

<h4 id="️-v-bind를-사용하지-않으면-문자열은-상관없겠지만-나머지-자료형들이-문자열로-전달되기-때문에-v-bind를-사용해야-한다">❗️ v-bind를 사용하지 않으면 문자열은 상관없겠지만 나머지 자료형들이 문자열로 전달되기 때문에 v-bind를 사용해야 한다!</h4>

<h4 id="부모-컴포넌트">부모 컴포넌트</h4>

<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;child-component</span>
      <span class="na">:str=</span><span class="s">"strParent"</span> <span class="c">&lt;!-- 문자열(String) 전달 --&gt;</span>
      :num="numParent" <span class="c">&lt;!-- 숫자형(Number) --&gt;</span>
      :isOk="isOkParent" <span class="c">&lt;!-- 논리 자료형(Boolean) --&gt;</span>
      :arr="arrParent" <span class="c">&lt;!-- 배열(Array) --&gt;</span>
      :obj="objParent" <span class="c">&lt;!-- 객체(Object) --&gt;</span>
    /&gt;
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="k">import</span> <span class="nx">ChildComponent</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/components/ChildComponent.vue</span><span class="dl">'</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">components</span><span class="p">:</span> <span class="p">{</span> <span class="nx">ChildComponent</span> <span class="p">},</span>
  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">strParent</span><span class="p">:</span> <span class="dl">'</span><span class="s1">사라진 기억들에게</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">numParent</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span>
      <span class="na">isOkParent</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">arrParent</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
      <span class="na">objParent</span><span class="p">:</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">mojaeya</span><span class="dl">'</span> <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="prop-유효성-검사">prop 유효성 검사</h2>

<p>자바스크립트는 컴파일 시점이 아닌 런타임 시점에 모든걸 처리하기 때문에 어떤 값을 넣어도 에러가 뜨질 않는다.</p>

<p>그래서 props를 통해 전달받는 데이터에 대한 요구사항을 지정해주면, 컴포넌트를 사용하는 개발자가 어떤 타입으로 전달받게 코드를 작성해야 할지를 명확히 알고 개발을 하는 장점이 있다.</p>

<p><code class="language-plaintext highlighter-rouge">자식 컴포넌트</code>에서 <mark style="background-color: #dcffe4">props 옵션을 정의</mark>하는데는, <code class="language-plaintext highlighter-rouge">부모 컴포넌트</code>로부터 전달받는 데이터의 <code class="language-plaintext highlighter-rouge">type</code>, 데이터가 전달되지 않았을 때의 <code class="language-plaintext highlighter-rouge">default</code> 값, 필수여부 <code class="language-plaintext highlighter-rouge">required</code>, 유효성 검사 함수 <code class="language-plaintext highlighter-rouge">validator</code> 등이 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 기본 타입 체크 ("null" 과 "undefined"는 모든 타입 유효성 검사를 통과한다.)</span>
  <span class="nx">props</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">str</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
      <span class="na">default</span><span class="p">:</span> <span class="dl">''</span>
      <span class="na">required</span><span class="p">:</span> <span class="kc">true</span> <span class="c1">// 부모 컴포넌트로부터 반드시 데이터가 필수로 전달되어야 함.</span>
    <span class="p">},</span>
    <span class="nx">num</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
      <span class="k">default</span><span class="p">:</span> <span class="mi">0</span>
    <span class="p">},</span>
    <span class="nx">isOk</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">type</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span>
      <span class="k">default</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>

    <span class="c1">// 객체나 배열의 기본값(default)은 항상 팩토리 함수로부터 반환되어야 한다.</span>
    <span class="c1">// new를 붙여 호출하는 생성자함수(Constructor)를 통해 만든 함수가 아닌것을 '팩토리함수'라고 부른다.</span>
    <span class="nx">arr</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">type</span><span class="p">:</span> <span class="nb">Array</span><span class="p">,</span>
      <span class="k">default</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[]</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="nx">obj</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">type</span><span class="p">:</span> <span class="nb">Object</span><span class="p">,</span>
      <span class="k">default</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{}</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 그외</span>

    <span class="c1">// 커스텀 유효성 검사 함수</span>
    <span class="nl">propF</span> <span class="p">:</span> <span class="p">{</span>
      <span class="na">validator</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 값이 꼭 아래 세 문자열 중 하나와 일치해야 한다.</span>
        <span class="k">return</span> <span class="p">[</span><span class="dl">'</span><span class="s1">sucess</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">warning</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">danger</span><span class="dl">'</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span>
      <span class="p">}</span>
    <span class="p">},</span>

    <span class="c1">// 기본 값을 갖는 함수</span>
    <span class="nx">propG</span> <span class="p">:</span> <span class="p">{</span>
      <span class="nl">type</span><span class="p">:</span> <span class="nb">Function</span><span class="p">,</span>
      <span class="k">default</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 이건 팩토리 함수가 아니고 기본 값으로 사용되는 함수임!</span>
        <span class="k">return</span> <span class="dl">'</span><span class="s1">Default function</span><span class="dl">'</span>
      <span class="p">}</span>
    <span class="p">},</span>
  <span class="p">},</span>
</code></pre></div></div>

<p><br />
<br />
<br /></p>

<blockquote>
  <p><strong>Reference</strong><br />
본 포스팅은 아래 사이트를 참조 및 인용하여 개인공부 용도로 작성되었습니다.<br />
잘못된 내용 피드백 주시면 반영하겠습니다. 감사합니다.<br />
<a href="https://www.youtube.com/c/개발자의품격">개발자의품격</a><br />
<a href="http://www.yes24.com/Product/Goods/101926719">Vue.js 프로젝트 투입 일주일 전</a></p>
</blockquote>
:ET