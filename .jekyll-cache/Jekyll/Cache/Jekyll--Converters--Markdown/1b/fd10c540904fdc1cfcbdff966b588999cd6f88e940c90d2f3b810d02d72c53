I"M<p align="center"><img width="465" src="https://user-images.githubusercontent.com/76654131/147275251-0a5d5c88-7a74-47e2-91a1-31c3d46e107e.png" /></p>

<h2 id="node-js">Node JS</h2>

<p>난 Java의 프레임워크인 Spring처럼 Node JS가 프레임워크인줄 알고 있었다. Node JS는 프레임워크 X</p>

<blockquote>
  <p><strong>Chrome V8 JavaScript 엔진으로 빌드 된 JavaScript 런타임이다</strong></p>

</blockquote>

<p><strong>런타임</strong> : 프로그래밍 언어가 구동될 수 있도록 하는 <strong>실행 환경</strong></p>

<p><strong>즉 NodeJS는 우리가 JS로 앱을 만들고 실행할 수 있도록 해주는 실행 환경이다.</strong></p>

<hr />

<h2 id="혁신적인-node-js">혁신적인 Node JS</h2>

<p>원래 JavaScript는 웹브라우저에서만 쓰는 언어였다.</p>

<p>하지만 JavaScript를 웹브라우저 바깥에서도 쓸 수 있는 혁신적인 일을 해주게 하는것이</p>

<p>바로 <strong>Node JS</strong>!!!</p>

<p>홈페이지 뿐만 아니라 서버와 모바일 앱도 모두 <strong>JavaScript 하나로 모두 다 가능!</strong></p>

<hr />

<h2 id="node-js-특징">Node JS 특징</h2>

<ul>
  <li><strong>Non-Blocking I/0</strong>
    <blockquote>
      <p>논 블로킹 : 이전작업이 완료될 때까지 멈추지 않고 다음 작업을 수행하는 것</p>
    </blockquote>
  </li>
  <li><strong>싱글 스레드</strong></li>
  <li><strong>이벤트 기반의 비동기 처리</strong></li>
</ul>

<p>고성능으로 높은 생산성을 자랑하는 node.js 하지만 싱글스레드라서 에러 발생시 서버 전체가 다운되는 위험도 있는 것 같다.</p>

<p>그래서 한국 대기업들이 안정성을 위해 멀티스레드인 자바를 많이 쓰는건가?</p>

<p>아직 잘 모르지만 분야마다 어울리는 기술이 있는 것 같고 각각의 장단점을 잘 파악해서 최대의 효율을 뽑아내면 되는 것 같다.</p>

<p>답은 없는 것 같다.</p>

<p><br /></p>

<p><strong>Paypal 같은 경우 프론트 / 백엔드 기술을 통합해 생산성을 높이기 위해 Java에서 node.js로 전환을 했다.</strong></p>

<p>처음에 PayPal은 백엔드에 Java를 사용하고 프론트 엔드에 JavaScript를 사용했다. 그런데 Node.js 개발 팀 5명이 훨씬 짧은 시간에 거대한 Java 팀을 따라 잡는걸 보고 PayPal은 Java -&gt; Node.js로 전환했다고 한다.</p>

<hr />

<p><strong>다음과 같은 분야에 Node.js가 사용된다면 뛰어난 효율성을 가진다.</strong></p>

<ul>
  <li> 입출력이 잦은 어플리케이션</li>
  <li> 데이터 스트리밍 어플리케이션</li>
  <li> 데이터를 실시간으로 다루는 어플리케이션</li>
  <li> JSON API 기반 어플리케이션</li>
  <li> 싱글페이지 어플리케이션</li>
</ul>

<hr />

<h2 id="npm--node-package-manager-">NPM ( Node Package Manager )</h2>

<p align="center"><img width="361" src="https://user-images.githubusercontent.com/76654131/147275393-12782551-b752-430e-889b-6f0be8b5bccc.png" /></p>

<ul>
  <li><strong>NPM : Node JS에서 사용하는 모듈을 패키지로 만들어 관리하는 패키지 관리자</strong></li>
  <li><strong>Node.js의 패키지 생태계인 npm은 세계에서 가장 큰 오픈 소스 라이브러리 생태계</strong></li>
</ul>

<h4 id="우리는-전세계-훌륭한-자바스크립트-개발자들이-잘-만들어놓은-모듈들을-npm을-통해-사용하면-된다_">우리는 전세계 훌륭한 자바스크립트 개발자들이 잘 만들어놓은 모듈들을 npm을 통해 사용하면 된다._</h4>

<ul>
  <li>패키지 설치 : npm install 패키지명 =&gt;  이 명령어로 모듈이 사용하고 있는 다른 모듈의 의존성을 자동으로 해결</li>
</ul>

<blockquote>
  <p>npm i –save 패키지명 =&gt; npm@5 버전부터는 기본값으로 설정되어 따로 –save 안붙여도 된다.</p>
</blockquote>

<h4 id="그럼-설치된-패키지-관리는-어떻게-할까">그럼 설치된 패키지 관리는 어떻게 할까?</h4>

<p><u>package.json</u> 이라는 파일로 관리한다!</p>

<ul>
  <li>package.json 생성 방법 : npm init</li>
</ul>

<p>npm init을 실행하면 여러가지 질문이 쭉 연달아 나오는데 아직 잘 몰라서 그냥 일일이 엔터 눌러서 생성했다.</p>

<p>이러한 질문들을 무시하고 바로 package.json을 생성 하고 싶다면 npm init –force , npm init –yes</p>

<blockquote>
  <p>npm i , npm init -f , npm int -y 처럼 단축해서 명령해도 먹힌다.</p>
</blockquote>

<p><br />
<br />
<br /></p>

<blockquote>
  <p><strong>Reference</strong> <br />
본 포스팅은 아래 사이트를 참조 및 인용하여 개인공부 용도로 작성되었습니다. <br />
잘못된 내용 피드백 주시면 반영하겠습니다. 감사합니다. <br />
[<a href="https://web-front-end.tistory.com/3">https://web-front-end.tistory.com/3</a></p>
</blockquote>

<p><a href="https://visualize.tistory.com/473">https://visualize.tistory.com/473</a></p>

<p><a href="https://m.blog.naver.com/hhw1990/221394005779">https://m.blog.naver.com/hhw1990/221394005779</a></p>
:ET