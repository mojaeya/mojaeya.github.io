I"J0<p>이전 포스팅까지 AWS에 인스턴스를 생성, 서버 파일을 인스턴스에 올리고 Node 환경을 구축하고 RDS까지 연결을 해주었다. </p>

<p>이번 포스팅에서는 AWS에 구축한 Node.js 프로세스를 PM2로 관리해 볼 것이다. *실행중인 프로그램을 프로세스라고 한다.</p>

<p>지금까지 노드를 공부하면서 ./bin/www, npm start, nodemon 등으로 서버를 실행하였고 ctrl+c로 종료하곤 했다.</p>

<p>개발을 하고 있는 상황이 아니라면 운영되고 있는 서비스의 <strong>서버는 절대 꺼지면 안된다.</strong></p>

<p>하지만 완벽한 것은 없듯이 에러로 인해 노드 서버가 다운되는 경우가 빈번하게 발생할 것이다.</p>

<p>누군가가 다시 실행하기 전까지는 다시 살아나지 않기 때문에 서비스를 운영하는데 있어 매우 치명적이다.</p>

<p>이러한 문제점을 해결해주는 것이 <strong>PM2</strong>다. </p>

<h2 id="pm2"><strong>PM2</strong> </h2>

<p><strong><em>PM2</em></strong>는 Node.js 프로세스를 쉽게 관리할 수 있게 해주는 <strong>Process Manager</strong>이다.</p>

<p>Node.js 앱을 cluster mode 로 실행시킨다거나, 메모리가 넘친다거나, <strong>오류로 인해 프로세스가 종료</strong>되는 등의 상황에 직면했을 때,</p>

<p>각각의 상황을 사용자가 모두 신경 써서 처리해줄 수도 있지만, 너무 복잡하고 신경 써야 할 일들이 많아진다.</p>

<p>이런 경우 <strong><em>PM2</em></strong>를 이용하면 간단한 설정만으로도 이러한 처리를 손쉽게 해결할 수 있다.</p>

<p><strong>PM2 대표적인 기능</strong></p>

<ul>
  <li>앱에서 충돌이 발생할 경우 앱을 자동으로 다시 시작</li>
  <li>런타임 성능 및 자원 소비에 대한 통찰력을 획득</li>
  <li>성능 향상을 위해 설정을 동적으로 수정</li>
  <li>클러스터링을 제어</li>
</ul>

<p>* aws ec2 인스턴스 생성시 http 포트 : 80</p>

<p>* 1024 이하의 포트는 root권한으로만 사용가능하다. 그래서 sudo 명령어 사용</p>

<h2 id="pm2-설치"><strong>PM2 설치</strong></h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>npm i pm2 <span class="nt">-g</span>
</code></pre></div></div>

<h2 id="pm2-실행"><strong>PM2 실행</strong></h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>pm2 start 파일명
</code></pre></div></div>

<p align="center"><img width="739" alt="스크린샷 2021-12-05 오후 5 35 20" src="https://user-images.githubusercontent.com/76654131/144739572-4e67f80e-6c4f-48b7-b6e5-80fc0fe98f91.png" /></p>

<p>www 라는 이름으로 이제 백그라운드에서 구동되고 있는 중이다. 이제 터미널을 종료해도 서버가 죽지 않고 계속 돌아가게 된다!</p>

<blockquote>
  <p><strong>백그라운드 프로세스</strong> : 사용자 간섭 없이 보이지 않는 뒷편에서 실행중인 컴퓨터 프로세스.<br />
이러한 프로세스를 위한 일반적인 작업에는 로그처리, 시스템 모니터링, 스케줄링, 사용자 통보 등이 있다.</p>
</blockquote>

<h2 id="pm2-명령어"><strong>PM2 명령어</strong></h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pm2 log     // 로그 출력 
<span class="nv">$ </span>pm2 monit   // 현재 실행중인 프로세스 모니터링

<span class="nv">$ </span>pm2 list   
<span class="nv">$ </span>pm2 status  // 현재 실행중인 프로세스 목록   

<span class="nv">$ </span>pm2 stop 파일명   // 프로세스 종료
<span class="nv">$ </span>pm2 restart 파일명 // 프로세스 재시작
<span class="nv">$ </span>pm2 delete 파일명 // 프로세스 삭제 

<span class="nv">$ </span>pm2 start 파일명 <span class="nt">--watch</span> // 소스코드 변경시 자동 재실행
<span class="nv">$ </span>pm2 <span class="nb">kill</span> // 실행한 모든 프로세스 중지 &amp; 삭제
</code></pre></div></div>

<h2 id="pm2-환경-변수-제어"><strong>PM2 환경 변수 제어</strong> </h2>

<p><strong>작업을 하면서 개발환경과 배포환경을 따로 두어서 편리하게 개발을 하기위해</strong> </p>

<p><strong>PM2에서</strong>ecosystem.config.js 라는 별도의 파일을 생성해서<strong>**  </strong>NODE_ENV를 제어해줄수 있다.**</p>

<p><strong>1. pm2 설정 파일(ecosystem.config.js) 만들기</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pm2 ecosystem   // 프로젝트에 ecosystem.config.js 파일이 생긴다
</code></pre></div></div>

<p><strong>[</strong>ecosystem.config.js<strong> 샘플코드]</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">apps</span> <span class="p">:</span> <span class="p">[{</span>
    <span class="na">script</span><span class="p">:</span> <span class="dl">'</span><span class="s1">index.js</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">watch</span><span class="p">:</span> <span class="dl">'</span><span class="s1">.</span><span class="dl">'</span>
  <span class="p">},</span> <span class="p">{</span>
    <span class="na">script</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./service-worker/</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">watch</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">./service-worker</span><span class="dl">'</span><span class="p">]</span>
  <span class="p">}],</span>

  <span class="na">deploy</span> <span class="p">:</span> <span class="p">{</span>
    <span class="na">production</span> <span class="p">:</span> <span class="p">{</span>
      <span class="na">user</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">SSH_USERNAME</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">host</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">SSH_HOSTMACHINE</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">ref</span>  <span class="p">:</span> <span class="dl">'</span><span class="s1">origin/master</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">repo</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">GIT_REPOSITORY</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">path</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">DESTINATION_PATH</span><span class="dl">'</span><span class="p">,</span>
      <span class="dl">'</span><span class="s1">pre-deploy-local</span><span class="dl">'</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
      <span class="dl">'</span><span class="s1">post-deploy</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">npm install &amp;&amp; pm2 reload ecosystem.config.js --env production</span><span class="dl">'</span><span class="p">,</span>
      <span class="dl">'</span><span class="s1">pre-setup</span><span class="dl">'</span><span class="p">:</span> <span class="dl">''</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>[나는 샘플코드를 아래와 같이 셋팅해주었다]</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">apps</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
          <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node_server</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// pm2로 실행한 프로세스 목록에서 이 애플리케이션의 이름으로 지정될 문자열</span>
          <span class="na">script</span><span class="p">:</span> <span class="dl">"</span><span class="s2">./bin/www</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// pm2로 실행될 파일 경로</span>
          <span class="na">watch</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 파일이 변경되면 자동으로 재실행 (true || false)</span>
          <span class="na">env</span><span class="p">:</span> <span class="p">{</span>
              <span class="dl">"</span><span class="s2">NODE_ENV</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">local</span><span class="dl">"</span> <span class="c1">// 개발환경시 적용될 설정 지정</span>
          <span class="p">},</span>
          <span class="na">exec_mode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">cluster</span><span class="dl">'</span><span class="p">,</span>  <span class="c1">// 실행 모드 : cluster/fork 중 cluter 실행모드</span>
          <span class="na">env_production</span><span class="p">:</span> <span class="p">{</span>
              <span class="dl">"</span><span class="s2">NODE_ENV</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">production</span><span class="dl">"</span> <span class="c1">// 배포환경시 적용될 설정 지정</span>
          <span class="p">}</span>
      <span class="p">}</span>
  <span class="p">]</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>▶ apps에 사용된 옵션</strong></p>

<ul>
  <li>name : 실행 모드 이름</li>
  <li>script : 실행되는 파일</li>
  <li>watch : watch on/off</li>
  <li>env: Node.js 환경변수 //  모든 배포 환경에서 공통으로 사용한다.</li>
  <li>exec_mode: 실행모드</li>
</ul>

<p><strong>2.  pm2 설정 파일로 서버 실행하기</strong></p>

<p><strong>개발용</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pm2 start ecosystem.config.js
</code></pre></div></div>

<p><strong>배포용</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pm2 start ecosystem.config.js <span class="nt">--env</span> production
</code></pre></div></div>

<p><strong>위에서 설정한 네이밍 env_production이 명령어로 –env production임을 알 수 있다.</strong></p>

<p>(참고로  둘다 pm2 기본 설정파일명인 ecosystem.config.js는 빼고 명령어를 실행해도 된다.)</p>

<p>나는 AWS EC2 인스턴스에 접속해서 pm2 설정 파일로 서버를 실행했다.  아래와 같이 설정파일에서 설정한 네임이 맞게 뜨면 실행이 잘된것이다. </p>

<p>이제 node_server라는 이름으로 백그라운드에서 구동되어 서버가 죽지 않고 계속 돌아게 된다!</p>

<p align="center"><img width="739" alt="스크린샷 2021-12-05 오후 5 35 37" src="https://user-images.githubusercontent.com/76654131/144739585-b487772a-674a-4da9-b857-9f37c3de8f2a.png" />
</p>

<p><br />
<br />
<br /></p>

<blockquote>
  <p><strong>Reference</strong> <br />
본 포스팅은 아래 사이트를 참조 및 인용하여 개인공부 용도로 작성되었습니다. <br />
잘못된 내용 피드백 주시면 반영하겠습니다. 감사합니다. <br />
<a href="https://pm2.keymetrics.io/docs/usage/quick-start/">https://pm2.keymetrics.io/docs/usage/quick-start/</a> <br />
<a href="https://fkkmemi.github.io/nemv/nemv-034-hello-pm2/">https://fkkmemi.github.io/nemv/nemv-034-hello-pm2/</a></p>
</blockquote>
:ET