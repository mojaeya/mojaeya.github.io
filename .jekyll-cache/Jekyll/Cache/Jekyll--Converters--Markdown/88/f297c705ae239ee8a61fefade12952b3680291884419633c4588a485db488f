I"m<h1 id="-함수-"><font color="black"> 함수 </font></h1>
<ul>
  <li>함수는 프로그램을 구성하는 주요 ‘구성 요소(building block)’입니다.</li>
  <li>함수를 이용하면 중복 없이 유사한 동작을 하는 코드를 여러 번 호출할 수 있다.</li>
</ul>

<h2 id="함수-선언-및-호출">함수 선언 및 호출</h2>
<p><img width="50%" src="https://user-images.githubusercontent.com/76654131/137621650-c7969034-2596-4ae4-ae59-946ca6dc8273.png" /></p>

<ul>
  <li>함수 호출할 때 전달하는 값 : 인수 (argument)</li>
  <li>함수 선언문의 인수 : 인자=매개변수 (parameter)</li>
  <li>함수의 출력값 : 반환값</li>
</ul>

<h2 id="인수">인수</h2>
<ul>
  <li>함수는 인수를 여러개 받을수도, 안받을수도 있다.</li>
  <li>자바스크립트 함수는 리턴값이 없어도 항상 리턴값을 반환!!!</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">원주</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">바보</span><span class="dl">"</span><span class="p">)}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">원주</span><span class="p">())</span> <span class="c1">// undefined</span>
</code></pre></div></div>

<h2 id="함수-선언문-끌어올림-hoisting">함수 선언문 끌어올림 (hoisting)</h2>
<ul>
  <li>변수 선언문 호이스팅처럼 함수 선언문을 프로그램의 첫머리로 끌어올린다.</li>
  <li>그래서 함수 선언문은 프로그램의 어떤 위치에도 작성해도 문제없이 작동!!!</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">conosole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="c1">// 25</span>
<span class="kd">function</span> <span class="nx">square</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span> <span class="p">}</span>
</code></pre></div></div>

<h2 id="함수-리터럴로-정의한-함수는-hoisting-x">함수 리터럴로 정의한 함수는 hoisting X</h2>
<ul>
  <li>함수 선언문 끝에 세미콜론이 있으면, 함수 리터럴로 정의한 익명함수(무명함수)이다.</li>
  <li>일반적인 함수선언문과 사용법은 같은데, 함수 리터럴로 정의한 함수는 호이스팅이 안된다.</li>
  <li>그래서 아래처럼 정의하지 않은 상태에서 함수를 호출하면 타입 오류 발생</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">conosole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="c1">// TypeError : square is not a function</span>
<span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span> <span class="p">};</span>
</code></pre></div></div>

<h2 id="함수-안에서의-변수-선언과-변수-hoisting">함수 안에서의 변수 선언과 변수 hoisting</h2>
<ul>
  <li>함수 안에서 선언된 지역변수의 유효범위는 함수 전체이다.
즉, 일반적인 변수선언문의 호이스팅과 마찬가지로 함수안의 변수 선언부를 함수의 첫머리로 끌어올린다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// undefined</span>
   <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">local</span><span class="dl">"</span><span class="p">.</span>  <span class="c1">// var =&gt; 변수 선언을 생략하면, 전역변수로 선언되는거 주의!</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// local</span>
   <span class="nx">retuan</span> <span class="nx">a</span>
<span class="p">}</span>   
</code></pre></div></div>

<h2 id="자바스크립트에서는-함수가-객체이다">자바스크립트에서는 함수가 객체이다</h2>
<ul>
  <li>즉 함수의 기본 기능인 코드 실행뿐만 아니라, 함수 자체가 일반 객체처럼 프로퍼티들을 가질 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span> <span class="p">}</span>   

<span class="nx">add</span><span class="p">.</span><span class="nx">result</span> <span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>   
<span class="nx">add</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">ok</span><span class="dl">'</span>   

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">.</span><span class="nx">result</span><span class="p">)</span> <span class="c1">// 5</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="c1">// 'ok'</span>
</code></pre></div></div>

<h4 id="---자바스크립트-함수는-다음과-같은-동작이-가능하기에-일급-객체-라고도-부른다-">📌  <font color="black"> 자바스크립트 함수는 다음과 같은 동작이 가능하기에 "일급 객체" 라고도 부른다. </font></h4>
<ul>
  <li>리터털에 의해 생성</li>
  <li>변수나 배열의 요소, 객체의 프로퍼티 등에 할당 가능</li>
  <li>함수의 인자로 전달 가능</li>
  <li>함수의 리턴값으로 리턴 가능</li>
  <li>동적으로 프로퍼티를 생성 및 할당 가능</li>
</ul>

<h4 id="위에-항목들을-코드로-확인하고-싶다면-click"><a href="https://programmer-seva.tistory.com/25">위에 항목들을 코드로 확인하고 싶다면 Click</a></h4>

<h2 id="참조에-의한-호출">참조에 의한 호출</h2>
<ul>
  <li>함수는 원시값을 인수로 넘겼을 때랑, 객체를 인수로 넘겼을 때 다르게 동작한다.</li>
  <li>왜냐하면, 원시값과는 다르게 변수에 객체의 참조가 저장되기 떄문이다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 원시값을 인수로 넘길 경우</span>
<span class="kd">function</span> <span class="nx">add1</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="o">+</span><span class="mi">1</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">add1</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 값의 전달(복사) =&gt; 변수 a와 x는 다른 메모리에 위치한 별개의 변수</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">a = </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">a</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">, b = </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">b</span><span class="p">)</span> <span class="c1">// a = 3, b = 4</span>

<span class="c1">// 객체를 인수로 넘길 경우</span>
<span class="kd">function</span> <span class="nx">add1</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">p</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="nx">p</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="nx">p</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span><span class="na">x</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span><span class="mi">4</span><span class="p">}</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">add1</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 참조 전달 =&gt; 변수 a와 인자 p가 똑같은 객체를 참조하고 있는거임</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="c1">// Object {x=4, y=5} Object {x=4, y=5}</span>
</code></pre></div></div>

<h2 id="인수-여러개를-우아하게-전달해보자">인수 여러개를 우아하게 전달해보자</h2>
<p><strong>&lt; 함수에 넘겨야 하는 인수 개수가 많아지면 발생하는 문제 &gt;</strong></p>
<ul>
  <li>인수의 순서를 착각하기 쉽다.</li>
  <li>함수가 받는 인수 개수를 바꾸면, 함수의 호출 방법이 바뀌므로 프로그램 전체를 수정해야하는 대참사</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 인수가 많은 함수</span>
<span class="kd">function</span> <span class="nx">setBallProperties</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">vx</span><span class="p">,</span> <span class="nx">vy</span><span class="p">,</span> <span class="nx">radius</span><span class="p">){...}</span>
<span class="p">...</span>
<span class="nx">setBallProperties</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>

<span class="c1">// 객체의 프로퍼티에 담아서 함수에 넘김</span>
<span class="kd">var</span> <span class="nx">parameters</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">vx</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="na">vy</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span> <span class="na">radius</span><span class="p">:</span> <span class="mi">5</span>
 <span class="p">};</span>
 <span class="kd">function</span> <span class="nx">setProperties</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{...}</span>
 <span class="p">...</span>
 <span class="nx">setBallProperties</span><span class="p">(</span><span class="nx">parameters</span><span class="p">)</span>
 
 <span class="nx">이렇게</span> <span class="nx">하면</span><span class="p">,</span> <span class="nx">인수를</span> <span class="nx">추가하는</span> <span class="nx">경우</span> <span class="nx">객체에</span> <span class="nx">프로퍼티만</span> <span class="nx">추가하면</span> <span class="nx">되기</span> <span class="nx">때문에</span> <span class="nx">간편</span><span class="o">!</span>
 
 <span class="nx">단</span><span class="p">,</span> <span class="nx">함수</span> <span class="nx">안에서</span> <span class="nx">객체의</span> <span class="nx">프로퍼티를</span> <span class="nx">수정하면</span><span class="p">,</span> <span class="nx">호출한</span> <span class="nx">코드에</span> <span class="nx">있는</span> <span class="nx">인수</span> <span class="nx">객체의</span> <span class="nx">프로퍼티가</span> <span class="nx">함께</span> <span class="nx">바뀌므로</span> <span class="nx">주의</span><span class="o">!</span>
 <span class="o">=&gt;</span> <span class="nx">객체를</span> <span class="nx">인수로</span> <span class="nx">넘기면</span><span class="p">,</span> <span class="nx">함수에는</span> <span class="nx">객체의</span> <span class="nx">참조가</span> <span class="nx">전달되기</span> <span class="nx">때문이다</span><span class="p">.</span>
</code></pre></div></div>

<h2 id="변수의-유효범위">변수의 유효범위</h2>
<ul>
  <li>변수에 접근할 수 있는 범위 : 유효범위
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 전역변수 a의 유효범위와 지역변수 b의 유효범위</span>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">global</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">f</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">local</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// "global"</span>
  <span class="k">return</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">f</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span> <span class="nl">ReferenceError</span><span class="p">:</span> <span class="nx">b</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">defined</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="변수의-충돌">변수의 충돌</h2>
<ul>
  <li>변수에 유효범위가 있는 이유는 프로그램의 다른 부분에서 선언된 이름이 같은 변수와 충돌하지 않기 위함. <br />
덕분에 함수안에서 변수 이름 지을 때 신경 안쓰고 지어도 된다.</li>
  <li>하지만, 전역 변수 이름과 지역 변수 이름이 같으면 충돌한다. 이때는 아래처럼 전역변수를 숨기고 지역변수를 사용하게 된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">global</span><span class="dl">"</span>
<span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">local</span><span class="dl">"</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// local</span>
    <span class="k">return</span> <span class="nx">a</span>
<span class="p">}</span>
<span class="nx">f</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// global</span>
</code></pre></div></div>

<h2 id="블록-유효-범위--let-과-const">블록 유효 범위 : let 과 const</h2>
<ul>
  <li>var로 선언한 변수와 let으로 선언한 변수의 가장 큰차이점은 let으로 선언한 변수의 유효 범위가 블록 안이라는 점이다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// let으로 선언한 변수의 유효범위</span>
<span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">outer x</span><span class="dl">"</span>
<span class="p">{</span>
	<span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">inner x</span><span class="dl">"</span>
  <span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">inner y</span><span class="dl">"</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// inner x</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// inner y</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>	<span class="c1">// outer x</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span>  <span class="c1">// ReferenceError : y is not defined</span>
</code></pre></div></div>
<ul>
  <li>var 문으로 선언한 변수를 읽으려고 시도할때 오류가 발생하지 않는것과 대조적 (TDZ)
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// ReferenceError: x is not defined</span>
<span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span>
</code></pre></div>    </div>
    <p>👋 const문으로 선언한 상수값은 수정 불가능하다고 변수 시간에 배웠는데, 상수 값이 객체나 배열인 경우는 수정 가능하다~</p>
  </li>
</ul>

<h2 id="객체의-메서드-생성자--객체의-기초-포스팅-참조">객체의 메서드, 생성자 : <a href="https://mojaeya.github.io/basic-object">객체의 기초 포스팅 참조</a></h2>

<h1 id="배열">배열</h1>
<ul>
  <li>순서가 있는 컬렉션을 저장할 때 쓰는 자료구조인 ‘배열’</li>
</ul>

<h2 id="배열-선언">배열 선언</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1">// 이 방법이 많이 쓰임</span>

<span class="kd">let</span> <span class="nx">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">사과</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">오렌지</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">자두</span><span class="dl">"</span><span class="p">]</span> <span class="c1">// 선언과 동시에 초기값 설정</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fruits</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1">// 사과</span>
<span class="nx">fruits</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">귤</span><span class="dl">'</span> <span class="c1">// 요소 수정</span>
<span class="nx">fruits</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">레몬</span><span class="dl">'</span> <span class="c1">// 요소 추가</span>
<span class="nx">fruits</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">과일</span><span class="dl">'</span><span class="p">)</span>
<span class="k">delete</span> <span class="nx">fruits</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="o">-</span> <span class="nx">배열의</span> <span class="nx">요소에는</span> <span class="nx">변수와</span> <span class="nx">마찬가지로</span> <span class="nx">모든</span> <span class="nx">타입의</span> <span class="nx">값이</span> <span class="nx">올</span> <span class="nx">수</span> <span class="nx">있다</span><span class="p">.</span>
</code></pre></div></div>
<h2 id="배열은-객체">배열은 객체</h2>
<ul>
  <li>자바스크립트의 배열은 Array 객체 =&gt; 객체로 배열의 기능을 가상으로 흉내낸것</li>
</ul>

<h4 id="-아니-왜-계속-배열과-함수가-객체라는거냐고-ㅡㅡ">🔥 아니 왜 계속 배열과 함수가 객체라는거냐고 ㅡㅡ</h4>

<h4 id="자바스크립트의-자료형-7가지">자바스크립트의 자료형 7가지</h4>
<p>📌 Primitive (기본 자료형)</p>
<ul>
  <li>Boolean</li>
  <li>Null</li>
  <li>Undefined</li>
  <li>Number</li>
  <li>String</li>
  <li>Symbol</li>
</ul>

<p>📌 Object (객체)</p>
<ul>
  <li>Object</li>
</ul>

<p>결론: 배열은 자바스크립트의 일곱 가지 원시 자료형에 해당하지 않고, 원시 자료형이 아닌 객체형에 속하기 때문에 객체처럼 동작한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">A</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">B</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">C</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">D</span><span class="dl">"</span><span class="p">]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">]</span> <span class="c1">// C</span>
<span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="c1">// undefined =&gt; 객체의 성질과 같다.</span>
</code></pre></div></div>

<h2 id="희소배열">희소배열</h2>
<ul>
  <li>배열 안에 요소의 위치가 연속적이지 않은 배열</li>
  <li>배열의 length 값보다 배열 요소의 개수가 언제나 적다 (일반적인 배열은 length 값과 배열 요소의 개수가 같다)
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">A</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">B</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">C</span><span class="dl">"</span><span class="p">]</span>
<span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">E</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// ["A", "B", "C", undefined, "E"]. // length = 5</span>
</code></pre></div>    </div>
    <h4 id="-array-객체는-배열의-인덱스를-문자열로-변환해서-그것을-프로퍼티로-이용한다">📌 Array 객체는 배열의 인덱스를 문자열로 변환해서 그것을 프로퍼티로 이용한다.</h4>
  </li>
  <li>그러므로 배열을 객체로 생각하면 희소배열도 자연스럽게 이해하기 쉽다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 위에 희소배열 코드를 객체 리터럴로 표시</span>
<span class="p">{</span><span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">A</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">B</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">C</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">4</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">E</span><span class="dl">"</span><span class="p">}</span> 
</code></pre></div>    </div>
  </li>
</ul>

<p><br />
<br />
<br /></p>

<blockquote>
  <p><strong>Reference</strong> <br />
본 포스팅은 아래 사이트를 참조 및 인용하여 개인공부 용도로 작성되었습니다. <br />
잘못된 내용 피드백 주시면 반영하겠습니다. 감사합니다.</p>
</blockquote>
:ET