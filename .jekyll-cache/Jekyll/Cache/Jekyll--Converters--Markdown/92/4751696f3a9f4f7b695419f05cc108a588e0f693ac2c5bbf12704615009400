I"b0<p><br /></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">echo</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
      <span class="c1">// complete</span>
      <span class="nx">callback</span><span class="p">()</span>
   <span class="p">},</span><span class="mi">1000</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">())</span>
<span class="p">}</span>

<span class="nx">echo</span><span class="p">(</span><span class="dl">'</span><span class="s1">라면구입</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
   <span class="nx">echo</span><span class="p">(</span><span class="dl">'</span><span class="s1">냄비준비</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="nx">echo</span><span class="p">(</span><span class="dl">'</span><span class="s1">냄비에 물담기</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
         <span class="nx">echo</span><span class="p">(</span><span class="dl">'</span><span class="s1">끓이기</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="nx">echo</span><span class="p">(</span><span class="dl">'</span><span class="s1">라면 스프 넣기</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
               <span class="nx">echo</span><span class="p">(</span><span class="dl">'</span><span class="s1">식사</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
                  
               <span class="p">})</span>
            <span class="p">})</span>
         <span class="p">})</span>
      <span class="p">})</span>
   <span class="p">})</span>
<span class="p">})</span>  
<span class="c1">// 순서대로 실행</span>
</code></pre></div></div>

<p>나는 위처럼 아직까지는 <strong>비동기 처리</strong>로 <strong>콜백함수</strong>를 사용해 코드를 작성해왔다. 하지만 <strong>콜백 지옥</strong>으로 인해 가독성이 나쁠 뿐더러, 비동기 처리 중에 발생한 에러의 처리가 까다로웠다. <br />
<strong><code class="language-plaintext highlighter-rouge">Promise</code></strong>는 자바스크립트에서 제공하는 <strong><u>비동기를 간편하게 처리할 수 있게 도와주는 객체</u></strong>이다.</p>

<p><strong><code class="language-plaintext highlighter-rouge">Promise 객체</code></strong>를 활용해 최대한 코드를 간단하게 만들어 보려고 한다.</p>

<hr />

<h2 id="promise-객체의-생성">Promise 객체의 생성</h2>

<h4 id="비동기-작업에-대해서-성공과-실패시-내보낼-결과값을-미리-설정해-둔다">비동기 작업에 대해서 성공과 실패시 내보낼 결과값을 미리 설정해 둔다.</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Promise 객체의 생성</span>
<span class="kd">const</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// 비동기 작업을 수행</span>

  <span class="k">if</span> <span class="p">(</span><span class="cm">/* 비동기 작업 수행 성공 */</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">Success</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span> <span class="cm">/* 비동기 작업 수행 실패 */</span>
    <span class="nx">reject</span><span class="p">(</span><span class="dl">'</span><span class="s1">Failed</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>
<p>new Promise에 전달되는 함수는 <strong>executor(실행자, 실행 함수)</strong>라고 부른다. <br />
<strong>executor</strong>는 new Promise가 만들어질 때 자동으로 실행된다. <br />
<strong>executor의 인수</strong> <strong><code class="language-plaintext highlighter-rouge">resolve</code></strong>와 <strong><code class="language-plaintext highlighter-rouge">reject</code></strong>는 자바스크립트에서 자체 제공하는 콜백이기 때문에, <br />
우리는 <strong><code class="language-plaintext highlighter-rouge">resolve</code></strong>와 <strong><code class="language-plaintext highlighter-rouge">reject</code></strong>를 신경쓰지 말고 <strong>executor</strong> 안 코드만 잘 작성하면 된다.</p>

<p><strong>대신,</strong> executor에선 성공 여부에 따라, 인수로 넘겨준 콜백 <code class="language-plaintext highlighter-rouge">(resolve, reject)</code> 중 <strong><code class="language-plaintext highlighter-rouge">하나를 반드시 호출</code></strong>해야 한다. </p>

<p>아무것도 호출 안하면, <u>프로미스 안에서 멈추기 때문에 다음 진행이 되지 않기 때문이다.</u></p>

<ul>
  <li><strong>resolve(value)</strong> : 일이 성공적으로 끝난 경우 그 결과를 나타내는 value와 함께 호출</li>
  <li><strong>reject(error)</strong> : 에러 발생 시 에러 객체를 나타내는 error와 함께 호출</li>
</ul>

<hr />

<h2 id="callback-지옥에서-벗어나-promise-적용하기">Callback 지옥에서 벗어나 Promise 적용하기</h2>

<h4 id="-async--await">✓ async / await</h4>
<p>동기 처리를 위해 Promise와 함께 사용하는 것이 async와 await이다</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">aync</code> : 비동기</li>
  <li><code class="language-plaintext highlighter-rouge">await</code> : 기다리다</li>
</ul>

<h4 id="핵심-문법">핵심 문법</h4>
<ol>
  <li>function 앞에 async라는 키워드를 붙인다.</li>
  <li>promise로 반환하는 것들 앞에 await을 붙인다.</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">echo</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">){</span>  <span class="c1">// resolve 값을 반환</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
         <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
         <span class="c1">// complete</span>
         <span class="nx">resolve</span><span class="p">()</span>
      <span class="p">},</span><span class="mi">1000</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">())</span>
   <span class="p">})</span>
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">aa</span><span class="p">()</span> <span class="p">{</span>      <span class="c1">// async/await 구문은 function에서 사용된다.</span>
   <span class="k">await</span> <span class="nx">echo</span><span class="p">(</span><span class="dl">'</span><span class="s1">라면구입</span><span class="dl">'</span><span class="p">)</span>
   <span class="k">await</span> <span class="nx">echo</span><span class="p">(</span><span class="dl">'</span><span class="s1">냄비준비</span><span class="dl">'</span><span class="p">)</span>
   <span class="k">await</span> <span class="nx">echo</span><span class="p">(</span><span class="dl">'</span><span class="s1">냄비에 물담기</span><span class="dl">'</span><span class="p">)</span>
   <span class="k">await</span> <span class="nx">echo</span><span class="p">(</span><span class="dl">'</span><span class="s1">끓이기</span><span class="dl">'</span><span class="p">)</span>
   <span class="k">await</span> <span class="nx">echo</span><span class="p">(</span><span class="dl">'</span><span class="s1">라면 스프 넣기</span><span class="dl">'</span><span class="p">)</span>
   <span class="k">await</span> <span class="nx">echo</span><span class="p">(</span><span class="dl">'</span><span class="s1">식사</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">aa</span><span class="p">()</span> <span class="c1">// // 순서대로 실행</span>
</code></pre></div></div>

<hr />

<h2 id="promise-상태">Promise 상태</h2>

<p>new Promise 생성자로 프로미스를 생성하고 종료될 때까지  promise 객체는 3가지 상태를 갖는다.</p>

<p align="center"><img width="502" alt="스크린샷 2021-12-24 오전 3 52 03" src="https://user-images.githubusercontent.com/76654131/147281275-85f776d4-494a-4b6e-9a79-db77246b6ae7.png" /></p>

<table>
  <thead>
    <tr>
      <th><strong>pending</strong></th>
      <th>비동기 처리가 아직 수행되지 않은 상태 (대기)</th>
      <th>resolve 또는 reject 함수가 아직 호출되지 않은 상태</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>fulfilled</strong></td>
      <td>비동기 처리가 수행된 상태 (성공)</td>
      <td>resolve 함수가 호출된 상태</td>
    </tr>
    <tr>
      <td><strong>rejected</strong></td>
      <td>비동기 처리가 수행된 상태 (실패)</td>
      <td>reject 함수가 호출된 상태</td>
    </tr>
    <tr>
      <td><strong>settled</strong></td>
      <td>비동기 처리가 수행된 상태(성공 또는 실패)</td>
      <td>resolve 또는 reject 함수가 호출된 상태</td>
    </tr>
  </tbody>
</table>

<h4 id="-요약"><strong>▶ 요약</strong></h4>

<p><code class="language-plaintext highlighter-rouge">executor</code>는 보통 시간이 걸리는 일을 수행한다. <br />
일이 끝나면 <code class="language-plaintext highlighter-rouge">resolve</code>나 <code class="language-plaintext highlighter-rouge">reject</code> 함수를 호출하는데, 이때 프라미스 객체의 상태가 변화한다.</p>

<p>성공(fulfilled) 혹은 실패(rejected) 상태의 프라미스는 ‘처리된(settled)’ 프로미스라고 부른다.    반대되는 프로미스로는 ‘대기(pending)’상태의 프로미스가 있다.</p>

<p><br />
<br />
<br /></p>

<blockquote>
  <p><strong>Reference</strong> <br />
본 포스팅은 아래 사이트를 참조 및 인용하여 개인공부 용도로 작성되었습니다. <br />
잘못된 내용 피드백 주시면 반영하겠습니다. 감사합니다. <br />
<a href="https://www.youtube.com/watch?v=G-tHfpfeFGQ">https://www.youtube.com/watch?v=G-tHfpfeFGQ</a>  <br />
<a href="https://ko.javascript.info/promise-basics">https://ko.javascript.info/promise-basics</a> <br />
<a href="https://spicycookie.me/JavaScript/promise/">https://spicycookie.me/JavaScript/promise/</a> <br />
<a href="https://poiemaweb.com/es6-promise">https://poiemaweb.com/es6-promise</a></p>
</blockquote>
:ET