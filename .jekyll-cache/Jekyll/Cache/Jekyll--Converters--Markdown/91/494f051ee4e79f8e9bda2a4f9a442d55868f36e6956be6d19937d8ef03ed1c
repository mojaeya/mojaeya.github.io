I"C<blockquote>
  <p>Vue.js 3.x / Vue-CLI</p>
</blockquote>

<p>일반적인 프로그래밍 언어로 개발을 할 때 자주 사용되는 기능을 메소드로 만들어 <code class="language-plaintext highlighter-rouge">공통모듈</code> 이라고 불리는 파일에 등록을 한다. 그리고 필요한 경우 <code class="language-plaintext highlighter-rouge">공통모듈</code> 파일을 import 해서 사용하곤 한다.</p>

<p><strong><mark style="background-color: #dcffe4">Vue</mark></strong>에서는 <code class="language-plaintext highlighter-rouge">Mixin</code> 이라는 기능을 사용해서 앞서 말한 <code class="language-plaintext highlighter-rouge">공통모듈</code>에 해당하는 파일을 만들어서 사용할 수 있다.</p>

<hr />

<h2 id="mixin-파일-생성하기">Mixin 파일 생성하기</h2>

<p><code class="language-plaintext highlighter-rouge">Mixin</code> 파일은 쉽게 생각하면 일반적인 <strong><mark style="background-color: #dcffe4">Vue</mark></strong> 컴포넌트 구성에서 <code class="language-plaintext highlighter-rouge">&lt;scirpt&gt;</code>에 해당하는 부분을 별도의 자바스크립트 파일로 만든다고 생각하면 된다.</p>

<p>서버와 통신하지 않는 화면(컴포넌트)은 거의 없다고 볼 수 있다. 그래서 서버의 api를 호출할 때 쓰는 라이브러리 <code class="language-plaintext highlighter-rouge">axios</code>를 이용해서 서버 데이터를 호출했던 메소드를 <code class="language-plaintext highlighter-rouge">Mixin</code> 파일로 만들어보려고 한다.</p>

<blockquote>
  <p>npm install axios</p>
</blockquote>

<h4 id="-mixinsaxiosjs">&gt; mixins/axios.js</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// 함수 이름에 '$' 를 사용한 이유는 Mixin 파일을 사용하는 컴포넌트 내에 동일한 메소드명이 있는 것을 방지 및 구분하기 위함!</span>
    <span class="c1">// 헷갈리지 않기 위한 일종의 약속</span>
    <span class="k">async</span> <span class="nx">$get</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="k">await</span> <span class="nx">axios</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">url</span><span class="p">).</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
        <span class="p">})</span>
      <span class="p">).</span><span class="nx">data</span><span class="p">;</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<hr />

<h2 id="컴포넌트에서-mixin-사용하기">컴포넌트에서 Mixin 사용하기</h2>

<p>그 다음 아래와 같이 <code class="language-plaintext highlighter-rouge">mixins 프로퍼티</code>에 사용할 믹스인 파일을 정의해서 사용할 수 있다.</p>

<h4 id="-viewsmixinviewvue">&gt; views/MixinView.vue</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// &lt;script&gt;</span>
<span class="k">import</span> <span class="nx">AxiosMixin</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/mixins/axios</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// .js 생략 가능</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">mixins</span><span class="p">:</span> <span class="p">[</span><span class="nx">AxiosMixin</span><span class="p">],</span> <span class="c1">// 사용할 믹스인 파일을 배열로 등록</span>
  <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getData</span><span class="p">();</span> <span class="c1">// mounted 될 때 서버 api의 데이터를 가져온다.</span>
  <span class="p">},</span>
  <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="k">async</span> <span class="nx">getData</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">dataList</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">$get</span><span class="p">(</span><span class="dl">"</span><span class="s2">서버 api 주소</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<p>믹스인은 이렇게 메소드를 정의해서 다른 컴포넌트에서 사용할 수 있게 해준다.</p>

<p>그리고 사실 <code class="language-plaintext highlighter-rouge">mixin</code> 파일(AxiosMixin)을 컴포넌트 내에 import하고 <code class="language-plaintext highlighter-rouge">mixins 프로퍼티</code>에 등록을 하는 순간 믹스인 파일 &amp; 컴포넌트 파일의 <code class="language-plaintext highlighter-rouge">export default {}</code> 안에 있는 부분들이 하나로 병합이 되는 거라고 보면 이해하기 쉽다.</p>

<p>그래서 믹스인은 이러한 특성을 이용해 컴포넌트의 라이프사이클 훅을 그대로 이용할 수도 있다.</p>

<hr />

<h2 id="mixin에서-라이프-사이클-훅-이용하기">Mixin에서 라이프 사이클 훅 이용하기</h2>

<p>예를 들어 실제 DOM이 랜더링이 끝난 상태인 mounted 시점, 현재 컴포넌트를 빠져 나갈 때인 unmounted 시점에 DB에 방문 시작 &amp; 방문 종료 시각을 기록하는 코드를 만들자고 가정하자.</p>

<p><br />
<br />
<br /></p>

<blockquote>
  <p><strong>Reference</strong><br />
본 포스팅은 아래 사이트를 참조 및 인용하여 개인공부 용도로 작성되었습니다.<br />
잘못된 내용 피드백 주시면 반영하겠습니다. 감사합니다.<br />
<a href="https://www.youtube.com/c/개발자의품격">개발자의품격</a><br />
<a href="http://www.yes24.com/Product/Goods/101926719">Vue.js 프로젝트 투입 일주일 전</a></p>
</blockquote>
:ET