I"Pt<p><br />
막무가내로 암기를 하니 이해가 안가서 쉽게 이해하고자 앞서 <a href="https://mojaeya.github.io/cs/2021/11/04/osi-tcpip.md/"><strong>OSI 7 Layer 와 TCP/IP 개념 그림으로 이해하기</strong></a> 포스팅을 작성했으니 보고 오면 도움이 될 것 같다.</p>

<h2 id="osiopen-system-interconnection-7-layer">OSI(Open System Interconnection) 7 Layer</h2>
<ul>
  <li><strong>국제 표준화 기구인 ISO가 제정한, 컴퓨터 네트워크 분야의 통신과정을 7계층으로 나눈 표준을 의미한다.</strong></li>
  <li><strong>“개방형 체계(Open System)”</strong>란  “다른 것과 상호작용하는 체계”를 말한다. <br />
그냥 다른 것들(다른 생물체, 환경, 물건 등등)과 상호작용하는 모든 생물체나 물건들이 모두 개방형 체계로 볼 수 있으며 그렇기에 컴퓨터도 개방형 체계이다.</li>
  <li><strong>“상호연결(Interconnection)”</strong>이란 “다른 것과 연결돼 있는 것에 또 연결하는 것”을 의미한다. 그리고 수 많은 컴퓨터들이 연결돼 있는 인터넷이 바로 이런 상호연결이다.</li>
</ul>

<p>즉 <code class="language-plaintext highlighter-rouge">OSI 7 Layer</code> 란, <mark style="background-color: #fff5b1">"컴퓨터(개방형 체계)가 인터넷(상호연결)을 이용해 통신하는 과정을 7단계로 나눈 것"</mark>이다.</p>

<p align="center"><img width="60%" src="https://user-images.githubusercontent.com/76654131/142221775-63502a09-307a-4a23-b5c5-ed39eca44046.png" /></p>

<p>우리가 운영체제를 통해 하는 응용프로그램들의 모든 활동이 <code class="language-plaintext highlighter-rouge">Application(응용 계층)</code> 에 해당하는 행위다. <br />
ex) 마우스로 카카오톡을 실행하거나, 파일 및 삭제, 크롬, 네이버 브라우저로 이동</p>

<p>그래서 <u>다른 서버에 있는 컴퓨터에 브라우저를 이용해 접속하는</u>, 즉 <code class="language-plaintext highlighter-rouge">인터넷에 접속하는 행위</code> 는 위 사진처럼 <code class="language-plaintext highlighter-rouge">Application(응용 계층)</code> 에서 시작해 각 하위 계층으로 데이터가 이동한 뒤, <code class="language-plaintext highlighter-rouge">다른 컴퓨터의 Physical(물리 계층)</code> 에 도착한 다음 각 상위 계층으로 데이터가 이동하는 것으로 이해 할 수 있다.</p>

<h4 id="이렇게-계층을-7개로-나눈-이유">이렇게 계층을 7개로 나눈 이유</h4>
<p>네크워크 통신 중 연결이 끊어지는 원인이 물리적인 랜선이 문제일수도 있고, 네트워크 문제 등 다양한 문제일 수 있다. <br />
이런 경우 OSI 7 Layer를 사용하면 네트워크 통신이 일어나는 과정에서 연결이 끊어졌을 때, <font color="#0086E5">계층 구조</font>를 갖고 있기 때문에 단계적으로 파악할 수 있어 문제를 해결하기 용이하다. <br />
(현재는 참조 모델로만 사용하고 실제로 통신할 때는 <a href="https://mojaeya.github.io/cs/2021/11/05/osi-tcpip-diff/"><strong>시장 경쟁에서 이긴 TCP/IP</strong></a> 모델을 쓰고 있다.)</p>

<hr />

<h2 id="프로토콜-protocol">프로토콜 (Protocol)</h2>

<ul>
  <li>컴퓨터 공학에서 사용되는 <code class="language-plaintext highlighter-rouge">프로토콜(Protocol)</code> 은 <mark style="background-color: #fff5b1">"다른 기계들이 통신을 하기 위해 서로 지켜야할 규칙"</mark>을 말한다.</li>
  <li>“통신”이라는 것은 사실 “전기적 신호를 일치시켜서 정보교환을 하는 행위”이기 때문에 특정 “규칙(프로토콜)”을 일치시켜야 한다.</li>
  <li>“프로토콜을 지켜야(일치시켜야) 한다”는 것은 쉽게 라디오나 무전에서 통신이 되려면 “주파수를 맞춰야 했던 것과 같다”고 생각하면 된다.</li>
  <li>그리고 “인터넷을 통한 통신”은 사실은 어마어마하게 많은 전기공학, 통신공학, 물리공학 기술 등 수 많은 기술들이 복합적으로 사용돼 가능한 것으로, 당연히 그 수 많은 각각의 기술마다 서로 지켜야 할 프로토콜(규칙)이 있다.</li>
</ul>

<p>그것들이 바로 “OSI 1계층”부터 “OSI 7계층”까지 지겹도록 나오는 수 많은 프로토콜인 것이다. 그래서 네트워크를 공부한다는 것은 수 많은 프로토콜을 학습한다는 것과 마찬가지인것 같다. <br />
(“프로토콜” 이란 단어를 규칙으로 해석할 경우 이해가 잘 안간다면, “기술” 이라고 해석하고 이해하면 편하다!)</p>

<hr />

<h4 id="그럼-지금부터-osi-7계층을-자세히-살펴보자">그럼 지금부터 OSI 7계층을 자세히 살펴보자.</h4>

<h2 id="layer-1--physical-layer">Layer 1 : Physical Layer</h2>

<p>먼저 1계층 “Physical Layer (물리 계층)”은 통신 중 제일 낮은 단계이다. <br />
제일 낮은 단계라는 것은 OSI 7계층 중 맨 밑에 있다는 것이다.</p>

<p>두 대의 컴퓨터가 통신하려면 흔히 <code class="language-plaintext highlighter-rouge">비트(bit)</code> 라고 부르는 0과 1로 된 <code class="language-plaintext highlighter-rouge">디지털 신호</code>를 잘 주고 받으면 된다. 
이러한 신호를 보내기 위해서는 전선을 통해 전달해야 하는데 전자기파는 항상 0 ~ 무한대[Hz]의 주파수의 범위를 가진다나 뭐라나 이러한 이유 때문에 이런 전기신호를 통과시킬 수 있는 전선은 없다고 한다. 그래서 신호를 전송하려면 전기를 이용한 <code class="language-plaintext highlighter-rouge">아날로그</code> 신호로 바꿔줘서 전송해야 한다.</p>

<p align="center"><img width="60%" src="https://user-images.githubusercontent.com/76654131/146768830-03265ef1-ff5a-450b-9964-505f9ca2998d.png" /></p>

<h4 id="그래서-physical-layer-물리-계층-란">그래서 Physical Layer (물리 계층) 란?</h4>
<ul>
  <li>0과 1의 데이터를 아날로그 신호로 바꾸어 전선으로 흘려보내고 <code class="language-plaintext highlighter-rouge">encoding</code></li>
  <li>아날로그 신호가 들어오면 0과 1의 디지털 신호로 해석하여 <code class="language-plaintext highlighter-rouge">decoding</code></li>
  <li>즉, 물리 계층은 물리적으로 연결된 두대의 컴퓨터가 0과 1로 이루어진 데이터들을 주고 받을 수 있게 해주는 구간이다.</li>
</ul>

<h4 id="그럼-어떻게-신호를-바꿔서-보낼까">그럼 어떻게 신호를 바꿔서 보낼까?</h4>
<p>물리 계층에서 데이터링크 계층으로 데이터를 보낼 때 메인보드에 달린 <code class="language-plaintext highlighter-rouge">랜 카드(LAN card)</code>에서 컴퓨터의 0과 1의 <code class="language-plaintext highlighter-rouge">디지털</code> 신호를 “전기신호” 즉, <code class="language-plaintext highlighter-rouge">아날로그</code> 신호로 변환하여 랜 카드에 연결된 <code class="language-plaintext highlighter-rouge">랜 선</code>으로 보낸다.</p>

<p>이렇게 전기신호와 이것을 다루는 장비들의 영역이기에 말 그대로 <code class="language-plaintext highlighter-rouge">물리계층(Physical Layer)</code>이라 부른다.</p>

<ul>
  <li>단순히 비트열 전송</li>
  <li>프로토콜 : Modem, Cable, Fiber, RS-232C</li>
  <li>장비 : 랜카드, 허브, 리피터</li>
</ul>

<hr />

<h2 id="layer-2--data-link-layer">Layer 2 : Data Link Layer</h2>

<p>이제 1계층인 물리적인 전선을 지나서, 각 전선들을 통해 전달되는 데이터들이 서로 연결될 때 사용되는 기술과 장비들의 영역을 우린 데이터(<font color="red">Data</font>)들이 연결(<font color="red">link</font>)된다고 해서 <code class="language-plaintext highlighter-rouge">데이터 링크(Data link)</code> 계층이라고 한다.</p>

<p>“데이터링크 계층”은 위에서 말했다시피 서로 다른 데이터(신호)들이 연결되는 계층으로서, 어떻게 다른 컴퓨터들에게 오는 각각의 데이터들을 혼동, 충돌없이 원활하게 다른 컴퓨터로 보내겠느냐에 대한 프로토콜들이 있다.</p>

<h4 id="여러대의-기기들이-연결됐을-때네트워크가-형성됐을-때-각-기기들을-구분하기-위한-무언가가-필요하지-않을까">여러대의 기기들이 연결됐을 때(네트워크가 형성됐을 때) 각 기기들을 구분하기 위한 무언가가 필요하지 않을까?</h4>

<p>그래서 같은 네트워크에서 통신이 가능하게 해주는 매개체(<font color="red">M</font>edia)를 구분하고 접근(<font color="red">A</font>ccess)및 사용하기(<font color="red">C</font>ontrol)위해 사용되는 절대 겹치지 않는 주소인 <code class="language-plaintext highlighter-rouge">MAC</code>(Media Access Control) 주소가 있다.</p>

<p>즉, 겹칠 일이 없는 <code class="language-plaintext highlighter-rouge">MAC</code> 주소를 통신이 가능하게 해주는 모든 매개체들이 각자 가지고 있게 한 것이다.</p>

<p>통신이 가능하게 해주는 매개체를 구분하기 위한 것이 <code class="language-plaintext highlighter-rouge">MAC</code> 주소로, “컴퓨터”인 경우 <code class="language-plaintext highlighter-rouge">랜 카드</code>가 0과1 데이터를 신호로 바꿔 통신이 되게 해주는 매개체이기 때문에 우리가 익숙한 <code class="language-plaintext highlighter-rouge">랜 카드</code>에도 <code class="language-plaintext highlighter-rouge">MAC</code> 주소가 있다.</p>

<p>그리고 <code class="language-plaintext highlighter-rouge">2계층 프로토콜</code>과 <code class="language-plaintext highlighter-rouge">MAC</code> 주소를 이용해 같은 네트워크에 속한 기기들의 원할한 통신이 가능하게 해주는 장비에는 대표적으로 “2계층(L2) 스위치”가 있다.</p>

<h4 id="2계층-스위치-3계층-4계층에도-스위치가-있던데">2계층 스위치? 3계층, 4계층에도 스위치가 있던데?</h4>

<p>3계층에서 사용되는 “L3 스위치”, 4계층에서 사용되는 “L4 스위치”란 것도 있다.</p>

<p>기본적으로 “스위치”는 그 계층의 트래픽을 적절히 분배해 그 계층의 원할한 통신이 가능하게 해주는 기능이라고 생각하면 편하다.</p>

<ul>
  <li>PDU : 프레임(Frame)</li>
  <li>프로토콜 : 이더넷, MAC, PPP, ATM, LAN, Wifi</li>
  <li>장비 : 브릿지, 스위치</li>
</ul>

<blockquote>
  <p>PDU(Process Data Unit) : OSI 7 model 각 계층에서 전송되는 단위</p>
</blockquote>

<hr />

<h2 id="layer-3--network-layer">Layer 3 : Network Layer</h2>

<p>이제 단순히 전선 여러 개로 연결될 수 있는 수준(2계층)을 넘어 “네트워크와 네트워크 사이(인터넷)”에서 컴퓨터를 구분하고 찾아가기 위해 사용되는 장비와 기술 영역을 <code class="language-plaintext highlighter-rouge">네트워크 계층(Network Layer)</code>이라고 한다.</p>

<p>그리고 인터넷상의 수 많은 컴퓨터들이 서로 각 컴퓨터들을 구분하고 찾아가기 위해 사용하는 규칙(프로토콜)이 바로 익숙한 <code class="language-plaintext highlighter-rouge">IP(Internet Protocol)</code> 이다.</p>

<p>우리는 이 <code class="language-plaintext highlighter-rouge">IP</code>를 이용해 데이터를 보낼 때 <code class="language-plaintext highlighter-rouge">송신하는 컴퓨터의 위치</code> 와 <code class="language-plaintext highlighter-rouge">수신하는 컴퓨터 위치</code>를 적은 특정 형태 데이터를 만드는데, 이 데이터 형태를 <code class="language-plaintext highlighter-rouge">패킷(Packet)</code>이라고 한다.</p>

<p>또한 IP를 이용해 패킷을 만들 때나, 인터넷에서 컴퓨터나 길을 구분하기 위해 사용되는 <code class="language-plaintext highlighter-rouge">식별자</code>를 <code class="language-plaintext highlighter-rouge">IP 주소(address)</code>라고 부른다. <br />
이 <code class="language-plaintext highlighter-rouge">IP주소</code> 덕분에 광활한 인터넷에서 각 컴퓨터들 뿐만 아니라, “네트워크”, 그리고 “네트워크와 네트워크 사이의 길”을 구분할 수 있게 된 것이다.</p>

<p><code class="language-plaintext highlighter-rouge">IP</code> 즉, 인터넷 프로토콜과 주소를 기반으로 다른 네트워크를 연결해주고, 빠른 네트워크 길을 찾아주는 L3 장비가 있으니 바로 <code class="language-plaintext highlighter-rouge">라우터(Router)</code> 이다.</p>

<p align="center"><img width="80%" src="https://user-images.githubusercontent.com/76654131/146791288-b97293c6-65e8-4205-9135-28cbef5834af.png" /></p>

<p>위의 그림은 A가 B에게 데이터를 보내는 모습을 간략하게 표현한 것이다.</p>

<h4 id="그런데-잠깐-a는-b의-주소를-어떻게-아는거지">그런데 잠깐, A는 B의 주소를 어떻게 아는거지?</h4>
<p>B가 네이버에 있는 한 컴퓨터라고 생각해보자.
우리가 주소창에 www.naver.com 을 치면 이 영어주소는 IP주소로 변환되어 사용된다 (<code class="language-plaintext highlighter-rouge">DNS</code>).
따라서 우리는 naver의 IP주소를 알고 있는 셈이다. (그림에서 55.12.21.31 같은 경우)</p>

<p>다시 돌아와서,</p>

<p><code class="language-plaintext highlighter-rouge">송신하는 컴퓨터의 위치</code> 와 <code class="language-plaintext highlighter-rouge">수신하는 컴퓨터 위치</code>가 적힌 <code class="language-plaintext highlighter-rouge">패킷</code>을 이용해 <code class="language-plaintext highlighter-rouge">라우터</code>가 다른 네트워크를 구분 및 연결해주고 길을 찾아갈 수 있지만, 광활한 인터넷 특징상 목적지까지 가는 방법이 하나가 아니라면? 라우터는 멘붕에 빠지고 말 것이다.</p>

<h4 id="그래서-라우터가-보다-효율적이고-더-빠른-길을-찾기-위해-라우터에서-사용하는-기술프로토콜들이-있다">그래서 “라우터”가 보다 효율적이고 더 빠른 길을 찾기 위해 라우터에서 사용하는 기술(프로토콜)들이 있다.</h4>

<p>대표적으로 “EIGRP”, “OSPF”, “BGP” 등 라우터가 어떻게 길을 찾을 것인지 정하는 규칙(프로토콜)이 있으며, 이런 프로토콜을 더 효율적인 길을 찾는(Routing) 프로토콜이라 하여 <code class="language-plaintext highlighter-rouge">라우팅 프로토콜(Routing protocol)</code>이라 합니다.</p>

<blockquote>
  <p>참고로 기본적으로 OSI 상위 계층의 장비는 하위 계층의 장비 기능을 기본적으로 가지고 있다. <br />
그리고 보통 “라우터”는 스위치의 기능도 가지고 있지만 보통 수십 대를 연결할 수 있는 스위치에 비해 <br />
라우터는 컴퓨터를 직접 연결할 수 있는 포트를 많이 가지고 있지 않다.</p>
</blockquote>

<h4 id="그래서-network-layer-네크워크-계층-란">그래서 Network Layer (네크워크 계층) 란?</h4>
<ul>
  <li>수많은 네트워크들의 연결로 이루어지는 인터넷 네트워크 속에서</li>
  <li>어딘가에 있는 목적지 컴퓨터로 데이터를 전송하기 위해,</li>
  <li>IP 주소를 이용해서 길을 찾고 <code class="language-plaintext highlighter-rouge">routing</code></li>
  <li>
    <p>자신 다음의 라우터에게 데이터를 넘겨주는거 <code class="language-plaintext highlighter-rouge">forwarding</code></p>
  </li>
  <li>PDU : 패킷(Packet)</li>
  <li>프로토콜 : IP, ICMP 등</li>
  <li>장비 : 라우터, L3 스위치</li>
</ul>

<hr />

<h2 id="layer-4--transport-layer-전송-계층">Layer 4 : Transport Layer (전송 계층)</h2>

<p>이제 <code class="language-plaintext highlighter-rouge">네트워크 계층(IP)</code> 를 통해 특정 컴퓨터의 위치를 찾아내고 데이터를 보내려할 때, 어떤 식으로 데이터를 상대방에게 제대로 <code class="language-plaintext highlighter-rouge">전송(Transport)</code> 할 것인지의 기술들과 규칙을 다루는 계층을 <code class="language-plaintext highlighter-rouge">전송계층(Transport layer)</code> 라고 한다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">3계층 네트워크 계층(IP)에서 하는 일</code> : 인터넷에서 특정 컴퓨터를 찾고, 가는 길을 알려줄 때 쓰이는 것 (최종 도착지가 어디인가를 명시하는 계층)</li>
  <li><code class="language-plaintext highlighter-rouge">4계층 전송 계층에서 하는 일</code> : 제대로 데이터를 특정 컴퓨터에게 전달하는 것 (최종 도착지에 위치한 어떤 프로세스에게 데이터를 전달할 것인가, 즉 포트 번호를 명시하는 계층)</li>
</ul>

<p>물론 사실 <code class="language-plaintext highlighter-rouge">네트워크 계층(IP)</code> 만으로도 데이터를 목적지까지 전달할 수 있지만 데이터의 안전을 보장하지 못한다.</p>

<p><code class="language-plaintext highlighter-rouge">IP</code> 만 가지고 데이터 전송하는 것은 중고나라에서 안전거래 안하고 집주소(IP)을 알려주고 물건 산 것과 다름 없다. 물건이 안와도 보상 받을 방법이 없다.</p>

<p>하지만 <code class="language-plaintext highlighter-rouge">IP</code> 와 <code class="language-plaintext highlighter-rouge">전송 계층 프로토콜</code>을 같이 사용한다면, 데이터가 중간에 손상 및 유실될 시 다시 보낼 수 있다. 쿠팡 같이 첨부터 물건을 점검하고 보장하는 송장을 택배에 붙여주며, 만약 물건이 잘못 배달됐거나 배달이 안 되면 책임을 져주듯이 말이다.</p>

<h4 id="이처럼-확실한-데이터-전송을-위해-사용하는-전송-계층-에-사용되는-대표-프로토콜-tcp--udp">이처럼 확실한 데이터 전송을 위해 사용하는 <code class="language-plaintext highlighter-rouge">전송 계층</code> 에 사용되는 대표 프로토콜 TCP / UDP</h4>
<ul>
  <li>정확한 데이터를 전송하는 것이 목적인 <code class="language-plaintext highlighter-rouge">TCP(Transmission Control Protocol)</code></li>
  <li>정확한 데이터 배달보단 빠른 전송에 목적을 둔 <code class="language-plaintext highlighter-rouge">UDP(User Datagram Protocol)</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">TCP</code> 는 데이터를 발신하는 쪽에서 수신자가 온전한 데이터를 받을 수 있도록 하는 책임을 지니고 있어서, 데이터가 제대로 전달되지 않은 경우 이를 재전송해야 한다.</p>

<p>반면에 <code class="language-plaintext highlighter-rouge">UDP</code>는 그러한 책임을 지니고 있지 않아서 데이터가 제대로 전달되지 않은 경우에도 특별히 이를 재전송하지 않는다.</p>

<p><a href="https://mojaeya.github.io/cs/2021/11/04/osi-tcpip.md/"><strong>OSI 7 Layer 와 TCP/IP 개념 그림으로 이해하기</strong></a> 포스팅에서 말했던 것 처럼 편지가 제대로 전달됐는지 확인이 가능한 등기 우편(TCP)과 그렇지 않은 일반 우편(UDP)의 차이인 셈이다.</p>

<p><code class="language-plaintext highlighter-rouge">IP + TCP</code> : 집주소 + 직접 편지 받겠습니다.
<code class="language-plaintext highlighter-rouge">IP + UDP</code> : 집주소 + 우편함에 꽂아주세요.</p>

<h4 id="그런데-최종도착지인-컴퓨터에-데이터가-도착을-했는데-여러-개의-프로그램프로세스들이-실행되고-있다고-생각해보자">그런데 최종도착지인 컴퓨터에 데이터가 도착을 했는데, 여러 개의 프로그램(프로세스)들이 실행되고 있다고 생각해보자.</h4>
<h4 id="각각의-데이터가-알맞는-프로세스에-들어가야-할텐데-컴퓨터는-어떻게-알-수-있을까">각각의 데이터가 알맞는 프로세스에 들어가야 할텐데 컴퓨터는 어떻게 알 수 있을까?</h4>
<p>이럴 때 사용하는 <code class="language-plaintext highlighter-rouge">전송 계층</code> 의 기술이 <code class="language-plaintext highlighter-rouge">포트 번호(Port Number)</code> 다.</p>

<p><code class="language-plaintext highlighter-rouge">포트 번호(Port Number)</code>란 컴퓨터의 어느 애플리케이션(응용프로그램)에게 데이터를 전달할지를 알려주는 번호다. <br />
즉, 데이터를 받고자 하는 프로세스들은 <code class="language-plaintext highlighter-rouge">포트 번호</code>를 가져야 한다. 위에서 예를 들었던 편지에 써 있는 <code class="language-plaintext highlighter-rouge">받는 사람</code>과 마찬가지다.</p>

<p>정리하자면 특정 컴퓨터에게 데이터를 전달할 때, 특정 컴퓨터의 어떤 애플리케이션에게 데이터를 전달하라고 추가적으로 적는 번호가 바로 <code class="language-plaintext highlighter-rouge">포트 번호(Port)</code> 다.</p>

<h4 id="그러면-또-포트번호는-어떻게-알지">그러면 또 포트번호는 어떻게 알지?</h4>
<p>예를 들어 우리가 검색창에 www.naver.com 입력하는 것은 사실은 뒤에 <code class="language-plaintext highlighter-rouge">:80</code>,  80(HTTP) 포트가 생략된 것이다.</p>

<p><code class="language-plaintext highlighter-rouge">서버</code> 에선 <code class="language-plaintext highlighter-rouge">특정 애플리케이션에 쓰이는 프로토콜</code> 을 <code class="language-plaintext highlighter-rouge">잘 알려진 포트번호(0~1023)</code> 로 정해 사용하고 또한 <code class="language-plaintext highlighter-rouge">1024번부터</code> 는 보통 컴퓨터가 임의의 애플리케이션용 포트로 사용을 한다.</p>

<p>검색창에 www.naver.com 입력할 때 사실 내부 동작은, 우리가 접속한 네이버 “웹 브라우저”는 1024번 이상 포트중 아무 포트번호를 자동으로 할당받고, 웹 브라우저의 포트번호를 적어서 네이버 “서버”에 데이터를 보내는 것이다. 그래서 네이버 서버측에서도 클라이언트의 “웹 브라우저”로 데이터를 보낼 수 있던 것이다.</p>

<p>이렇게 <code class="language-plaintext highlighter-rouge">전송 계층</code> 에서 목적지 애플리케이션 <code class="language-plaintext highlighter-rouge">포트 번호</code> 와 <code class="language-plaintext highlighter-rouge">데이터들의 순서</code> 를 적고 <code class="language-plaintext highlighter-rouge">TCP</code>를 써서 만든 데이터 형태를 <br />
<code class="language-plaintext highlighter-rouge">세그먼트(Segment)</code>라고 한다.</p>

<ul>
  <li>PDU : 세그먼트(Segment)</li>
  <li>프로토콜 : TCP, UDP , ARP, RTP</li>
  <li>장비 : 게이트웨이, L4 스위치</li>
</ul>

<hr />

<h2 id="layer-5--session-layer-세션-계층">Layer 5 : Session Layer (세션 계층)</h2>

<p><code class="language-plaintext highlighter-rouge">네트워크 계층의 IP</code> 를 통해 컴퓨터를 찾아가고, <code class="language-plaintext highlighter-rouge">전송 계층의 포트 번호</code> 를 이용해 컴퓨터의 애플리케이션을 찾아가고, <code class="language-plaintext highlighter-rouge">전송 계층의 TCP</code> 로 안전한 연결을 확인했다.</p>

<p>그러면 이제 “서버의 애플리케이션”과 “클라이언트 애플리케이션” 사이에 데이터 전송을 위한 <code class="language-plaintext highlighter-rouge">논리적인 연결 통로</code>가 생긴다.</p>

<p>이 때 실시간으로 데이터를 주고 받기 위한 두 컴퓨터의 논리적 연결, 만남을 <code class="language-plaintext highlighter-rouge">세션(Session)</code> 이라 하며 이런 세션을 만들고, 유지, 종료할 때 사용되는 기술과 장비들을 <code class="language-plaintext highlighter-rouge">세션 계층</code> 이라고 한다.</p>

<p align="center"><img width="60%" src="https://user-images.githubusercontent.com/76654131/146880736-55bbd71d-5af0-42e8-92aa-09163486c59d.png" /></p>

<blockquote>
  <p>사실 “세션 계층, 표현 계층, 응용 계층”은 보통 동시에 같이 사용이 되므로, 구분이 좀 힘든편이다.
현대 인터넷에서 실제로 통신할 때는 TCP/IP 모델을 사용하기 때문에 세션계층과 뒤에 나올 표현, 응용 계층을 “응용 계층” 하나로 묶어서 주로 다룬다.</p>
</blockquote>

<ul>
  <li>프로토콜 : NetBIOS, SSH, TLS</li>
</ul>

<hr />

<h2 id="layer-6--presentation-layer-표현-계층">Layer 6 : Presentation Layer (표현 계층)</h2>

<h4 id="세션이-만들어져-이제-데이터를-전송하는데-각-애플리케이션마다-사용하는-데이터-형태가-각각-다르면-어떡해">세션이 만들어져 이제 데이터를 전송하는데, 각 애플리케이션마다 사용하는 데이터 형태가 각각 다르면 어떡해?</h4>

<p>그래서 세션을 통해 넘어오는 데이터(정보)들을 애플리케이션에서 필요한 형태로 변환해 애플리케이션에서 표현(Presentation)하는 계층이기에 <code class="language-plaintext highlighter-rouge">표현 계층(Presentation Layer)</code>이라고 한다.</p>

<ul>
  <li>문자 코드는 뭐로 할지, 압축(해제), 암호화등등  데이터를 어떻게 변환할지를 다루는 계층</li>
  <li>프로토콜 : JPG, MPEG, SMB, AFP</li>
</ul>

<hr />

<h2 id="layer-7--application-layer-응용-계층">Layer 7 : Application Layer (응용 계층)</h2>

<p>포스팅 초반에 언급했듯이 우리가 운영체제를 통해 하는 응용프로그램들의 모든 활동이 <code class="language-plaintext highlighter-rouge">Application(응용 계층)</code> 에 해당하는 행위다. <br />
ex) 마우스로 카카오톡을 실행하거나, 파일 및 삭제, 크롬, 네이버 브라우저로 이동</p>

<p>즉, 응용계층은 사용자와 바로 연결되어 있으며 응용 SW를 도와주는 계층이다.  <br />
사용자로부터 정보를 입력받아 하위 계층으로 전달하고 하위 계층에서 전송한 데이터를 사용자에게 전달한다.</p>

<p>파일 전송, DB, 메일 전송 등 여러가지 응용 서비스를 네트워크에 연결해주는 역할을 한다.</p>

<h4 id="대표적인-프로토콜">대표적인 프로토콜</h4>
<ul>
  <li>인터넷 상에서의 문자(Hyper Text)데이터들을 다루는 프로토콜 <code class="language-plaintext highlighter-rouge">HTTP</code></li>
  <li>메일을 보낼 때 사용되는 프로토콜 <code class="language-plaintext highlighter-rouge">SMTP</code></li>
  <li>방식의 차이가 있지만 둘다 메일을 받을 때 사용되는 프로토콜 <code class="language-plaintext highlighter-rouge">POP3</code>와 <code class="language-plaintext highlighter-rouge">IMAP</code></li>
  <li>도메인 네임서버를 찾을 때 사용되는 프로코톨 <code class="language-plaintext highlighter-rouge">DNS</code></li>
  <li>파일을 주고 받을 대 사용하는 프로토콜 <code class="language-plaintext highlighter-rouge">FTP</code></li>
  <li>텔넷 연결을 할 때 사용되는 프로토콜 <code class="language-plaintext highlighter-rouge">TELNET</code></li>
  <li>
    <p>SSH 연결을 할 때 사용되는 프로토콜 <code class="language-plaintext highlighter-rouge">SSH</code> 등이 있디.</p>
  </li>
  <li>프로토콜 : DHCP, HTTP, SMTP, POP3, IMAP, DNS, FTP, TELNET, SSH
<br />
<br /></li>
</ul>

<hr />

<h2 id="참고">참고</h2>
<ul>
  <li>계층은 지날 때마다 헤더(Header)가 붙는데, 이것은 해당 계층의 기능과 관련된 제어 정보가 포함되어 있다.</li>
  <li>
    <p>제어 정보들은 모두 운영체제가 제공하는 프로토콜에 의해 <br />
송신 측에서는 하위 계층으로 지날 때마다 덧붙여서 추가 되고 (캡슐화=Encapsulation), <br />
수신 측에서는 상위 계층으로 지날 때마다 순차적으로 헤더 정보를 처리하고 제거된다 (디캡슐화=Decapsulation).</p>
  </li>
  <li>캡슐화 : 위에서 아래로, 출발 준비 과정</li>
  <li>디캡슐화 : 아래에서 위로, 데이터 도착 과정</li>
  <li>
    <p><a href="https://naon.me/posts/til79"><strong>자세히</strong></a></p>
  </li>
  <li><a href="https://m.blog.naver.com/wlsdml1103/220936267002"><strong>OSI 7 Layer와 관련된 네트워크 장비</strong></a>
<br />
<br />
<br /></li>
</ul>

<blockquote>
  <p><strong>Reference</strong> <br />
본 포스팅은 아래 사이트를 참조 및 인용하여 개인공부 용도로 작성되었습니다. <br />
잘못된 내용 피드백 주시면 반영하겠습니다. 감사합니다. <br />
<a href="https://www.youtube.com/watch?v=1pfTxp25MA8">https://www.youtube.com/watch?v=1pfTxp25MA8</a> <br />
<a href="https://mamu2830.blogspot.com/2020/06/osi-7.html">https://mamu2830.blogspot.com/2020/06/osi-7.html</a> <br />
<a href="https://www.youtube.com/watch?v=aTPy201F0AA">https://www.youtube.com/watch?v=aTPy201F0AA</a>
<a href="https://velog.io/@hidaehyunlee/데이터가-전달되는-원리-OSI-7계층-모델과-TCPIP-모델">https://velog.io/@hidaehyunlee/데이터가-전달되는-원리-OSI-7계층-모델과-TCPIP-모델</a>
<a href="https://m.blog.naver.com/wlsdml1103/220936267002">https://m.blog.naver.com/wlsdml1103/220936267002</a></p>
</blockquote>
:ET